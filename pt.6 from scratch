import numpy as np
import nnfs                                 #Neural Network from Scratch(nnfs) import x and y data from scatter plot
from nnfs.datasets import spiral_data

nnfs.init()


X, y = spiral_data(100, 3)


class Layer_Dense:                                                                  #Initializes weights and biases for each layer
    def __init__(self, n_inputs, n_neurons):
        self.weights = 0.10 * np.random.randn(n_inputs, n_neurons)
        self.biases = np.zeros((1, n_neurons))
    def forward(self, inputs):                                                      #Calculate the output (inputs*weights + biases)
        self.output = np.dot(inputs, self.weights) + self.biases

class Activation_ReLU:                                                              #Rectified Linear Activation Function
    def forward(self, inputs):
        self.output = np.maximum(0, inputs)                                         #Applies ReLU to output of each layer

layer1 = Layer_Dense(2, 5)
layer2 = Layer_Dense(2, 3)
activation1 = Activation_ReLU()
activation2 = Activation_ReLU()

layer1.forward(X)
activation1.forward(layer1.output)
layer2.forward(X)
activation2.forward(layer2.output)

print(activation2.output)

